/*	Copyright 2007 	Edwin Stang (edwinstang@gmail.com)

    This file is part of JDPlay.

    JDPlay is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    JDPlay is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with JDPlay.  If not, see <http://www.gnu.org/licenses/>.
*/

/****************************************************************************************************************/

/* JDPlay.java
 *  
 *  Java implementation for the C++ JDPlay class in JDPlay_jni.dll
 *  JDPlay handles the DirectPlay feature called RippleLaunch.
 *  With RippleLaunch it is possible to start a game from an application.
 *
 *  This code was created by cxxwrap, a tool to create JNI code from a c++ header file.
 *  Do not edit this file!
 */

/****************************************************************************************************************/

package jdplay;

public class JDPlay extends Object {

	public JDPlay(String playerName, int maxSearchRetries, boolean debug)
	{
		implementation = new Long(__c16(playerName, maxSearchRetries, debug));
	}
	private native long __c16(String playerName, int maxSearchRetries, boolean debug);

	public void updatePlayerName(String playerName)
	{
		__m18(implementation.longValue(), playerName);
	}
	private native void __m18(long __imp, String playerName);

	public boolean initialize(String gameGUID, String hostIP, boolean isHost)
	{
		boolean __retval = false;
		__retval = __m19(implementation.longValue(), gameGUID, hostIP, isHost);
		return __retval;
	}
	private native boolean __m19(long __imp, String gameGUID, String hostIP, boolean isHost);

	public boolean launch(boolean searchForSession)
	{
		boolean __retval = false;
		__retval = __m20(implementation.longValue(), searchForSession);
		return __retval;
	}
	private native boolean __m20(long __imp, boolean searchForSession);
	
	public void delete()
	{
		__d(implementation.longValue());
		 implementation = null;
	}
	private native void __d(long __imp);
	
	/********* don't use anything beneath this *****************************************************/
	
	public JDPlay(Long __imp) { 
		implementation = __imp; 
	}
	
	protected Long implementation = null;
	protected boolean extensible = false;
	
	public Long getCxxwrapImpl() { 
		return implementation; 
	}
	
	public boolean equals(Object o) {
		if (!(o instanceof JDPlay)) return false;
		return implementation.equals(((JDPlay)o).implementation);
	}
	
	public int hashCode() { 
		return implementation.hashCode(); 
	}
}
